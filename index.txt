<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flip Flashcards with Media Capture</title>
    <style>
        /* ... (previous styles remain unchanged) ... */
        #pasteImage {
            display: none;
        }
        #imageInput {
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <h1>Flip Flashcards with Media Capture</h1>

    <div class="controls">
        <h2>Question</h2>
        <button onclick="startCaptureImage('question')">Capture Image</button>
        <button onclick="startCaptureVideo('question')">Start Video</button>
        <button onclick="pauseCaptureVideo('question')">Pause Video</button>
        <button onclick="stopCaptureVideo('question')">Stop Video</button>
        <button onclick="startCaptureAudio('question')">Start Audio</button>
        <button onclick="pauseCaptureAudio('question')">Pause Audio</button>
        <button onclick="stopCaptureAudio('question')">Stop Audio</button>
        <button onclick="switchCamera('question')">Switch Camera</button>
        <video id="questionVideoPreview" style="display:none;" controls></video>
        <audio id="questionAudioPreview" style="display:none;" controls></audio>
        <canvas id="questionCanvas" style="display: none;"></canvas>

        <h2>Answer</h2>
        <button onclick="startCaptureImage('answer')">Capture Image</button>
        <button onclick="startCaptureVideo('answer')">Start Video</button>
        <button onclick="pauseCaptureVideo('answer')">Pause Video</button>
        <button onclick="stopCaptureVideo('answer')">Stop Video</button>
        <button onclick="startCaptureAudio('answer')">Start Audio</button>
        <button onclick="pauseCaptureAudio('answer')">Pause Audio</button>
        <button onclick="stopCaptureAudio('answer')">Stop Audio</button>
        <button onclick="switchCamera('answer')">Switch Camera</button>
        <video id="answerVideoPreview" style="display:none;" controls></video>
        <audio id="answerAudioPreview" style="display:none;" controls></audio>
        <canvas id="answerCanvas" style="display: none;"></canvas>

        <h2>Add Image</h2>
        <input type="file" id="imageInput" accept="image/*">
        <button onclick="addImageToFlashcard('question')">Add to Question</button>
        <button onclick="addImageToFlashcard('answer')">Add to Answer</button>
    </div>

    <div class="container">
        <div class="flashcard" id="flashcard">
            <div class="flashcard-side flashcard-front" id="flashcardFront">Question Side</div>
            <div class="flashcard-side flashcard-back" id="flashcardBack">Answer Side</div>
        </div>
    </div>

    <div class="navigation-buttons">
        <button onclick="previousFlashcard()">Previous</button>
        <button onclick="addFlashcard()">Add Flashcard</button>
        <button onclick="nextFlashcard()">Next</button>
    </div>

    <script>
        let streams = { question: null, answer: null };
        let mediaRecorders = { question: null, answer: null };
        let isRecording = { question: false, answer: false };
        let currentCameraFacing = { question: 'user', answer: 'user' };

        const videoPreview = { 
            question: document.getElementById('questionVideoPreview'),
            answer: document.getElementById('answerVideoPreview')
        };
        const audioPreview = {
            question: document.getElementById('questionAudioPreview'),
            answer: document.getElementById('answerAudioPreview')
        };
        const canvas = {
            question: document.getElementById('questionCanvas'),
            answer: document.getElementById('answerCanvas')
        };
        const flashcard = document.getElementById('flashcard');
        const front = document.getElementById('flashcardFront');
        const back = document.getElementById('flashcardBack');

        let flashcards = [];
        let currentFlashcardIndex = -1;

        flashcard.addEventListener('click', () => {
            flashcard.classList.toggle('is-flipped');
        });

        function addFlashcard() {
            const newFlashcard = {
                question: front.innerHTML,
                answer: back.innerHTML
            };
            flashcards.push(newFlashcard);
            currentFlashcardIndex = flashcards.length - 1;
            alert("Flashcard added successfully!");
            resetFlashcard();
        }

        function nextFlashcard() {
            if (flashcards.length === 0) {
                alert("No flashcards available. Please add a flashcard first.");
                return;
            }
            currentFlashcardIndex = (currentFlashcardIndex + 1) % flashcards.length;
            displayCurrentFlashcard();
        }

        function previousFlashcard() {
            if (flashcards.length === 0) {
                alert("No flashcards available. Please add a flashcard first.");
                return;
            }
            currentFlashcardIndex = (currentFlashcardIndex - 1 + flashcards.length) % flashcards.length;
            displayCurrentFlashcard();
        }

        function displayCurrentFlashcard() {
            const currentFlashcard = flashcards[currentFlashcardIndex];
            front.innerHTML = currentFlashcard.question;
            back.innerHTML = currentFlashcard.answer;
            flashcard.classList.remove('is-flipped');
        }

        function resetFlashcard() {
            front.innerHTML = "Question Side";
            back.innerHTML = "Answer Side";
            flashcard.classList.remove('is-flipped');
        }

        function addImageToFlashcard(side) {
            const imageInput = document.getElementById('imageInput');
            const file = imageInput.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.style.maxWidth = '100%';
                    img.style.height = 'auto';
                    if (side === 'question') {
                        front.innerHTML = '';
                        front.appendChild(img);
                    } else {
                        back.innerHTML = '';
                        back.appendChild(img);
                    }
                };
                reader.readAsDataURL(file);
                imageInput.value = '';
            } else {
                alert('Please select an image file first.');
            }
        }

        function stopAllRecordings() {
            stopCaptureVideo('question');
            stopCaptureAudio('question');
            stopCaptureVideo('answer');
            stopCaptureAudio('answer');
        }

        async function startCaptureImage(side) {
            stopAllRecordings();
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ 
                    video: { facingMode: currentCameraFacing[side] } 
                });
                const videoTrack = stream.getVideoTracks()[0];
                const imageCapture = new ImageCapture(videoTrack);
                const bitmap = await imageCapture.grabFrame();
                canvas[side].width = bitmap.width;
                canvas[side].height = bitmap.height;
                const ctx = canvas[side].getContext('2d');
                ctx.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height);
                const imageBlob = canvas[side].toDataURL('image/png');
                if (side === 'question') {
                    front.innerHTML = `<img src="${imageBlob}" alt="Captured Image">`;
                } else {
                    back.innerHTML = `<img src="${imageBlob}" alt="Captured Image">`;
                }
                stream.getTracks().forEach(track => track.stop());
            } catch (error) {
                console.error('Error capturing image:', error);
            }
        }

        async function startCaptureVideo(side) {
            stopAllRecordings();
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ 
                    audio: true, 
                    video: { facingMode: currentCameraFacing[side] } 
                });
                streams[side] = stream;
                videoPreview[side].srcObject = stream;
                videoPreview[side].style.display = 'block';
                videoPreview[side].play();

                mediaRecorders[side] = new MediaRecorder(stream);
                let chunks = [];
                mediaRecorders[side].ondataavailable = (event) => {
                    chunks.push(event.data);
                };
                mediaRecorders[side].onstop = () => {
                    const videoBlob = new Blob(chunks, { type: 'video/webm' });
                    const videoURL = URL.createObjectURL(videoBlob);
                    if (side === 'question') {
                        front.innerHTML = `<video src="${videoURL}" controls></video>`;
                    } else {
                        back.innerHTML = `<video src="${videoURL}" controls></video>`;
                    }
                    videoPreview[side].style.display = 'none';
                };
                mediaRecorders[side].start();
                isRecording[side] = true;
            } catch (error) {
                console.error('Error accessing media devices:', error);
            }
        }

        function pauseCaptureVideo(side) {
            if (isRecording[side] && mediaRecorders[side] && mediaRecorders[side].state === "recording") {
                mediaRecorders[side].pause();
            }
        }

        function stopCaptureVideo(side) {
            if (isRecording[side] && mediaRecorders[side] && mediaRecorders[side].state !== "inactive") {
                mediaRecorders[side].stop();
                streams[side].getTracks().forEach(track => track.stop());
                isRecording[side] = false;
            }
        }

        async function startCaptureAudio(side) {
            stopAllRecordings();
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                streams[side] = stream;
                mediaRecorders[side] = new MediaRecorder(stream);
                let chunks = [];
                mediaRecorders[side].ondataavailable = (event) => {
                    chunks.push(event.data);
                };
                mediaRecorders[side].onstop = () => {
                    const audioBlob = new Blob(chunks, { type: 'audio/webm' });
                    const audioURL = URL.createObjectURL(audioBlob);
                    if (side === 'question') {
                        front.innerHTML = `<audio src="${audioURL}" controls></audio>`;
                    } else {
                        back.innerHTML = `<audio src="${audioURL}" controls></audio>`;
                    }
                    audioPreview[side].style.display = 'none';
                };
                mediaRecorders[side].start();
                isRecording[side] = true;
                alert(`Recording started for ${side}. Click 'Stop Audio' when finished.`);
            } catch (error) {
                console.error('Error accessing audio devices:', error);
            }
        }

        function pauseCaptureAudio(side) {
            if (isRecording[side] && mediaRecorders[side] && mediaRecorders[side].state === "recording") {
                mediaRecorders[side].pause();
            }
        }

        function stopCaptureAudio(side) {
            if (isRecording[side] && mediaRecorders[side] && mediaRecorders[side].state !== "inactive") {
                mediaRecorders[side].stop();
                streams[side].getTracks().forEach(track => track.stop());
                isRecording[side] = false;
            }
        }

        function switchCamera(side) {
            currentCameraFacing[side] = currentCameraFacing[side] === 'user' ? 'environment' : 'user';
            if (isRecording[side]) {
                stopCaptureVideo(side);
                startCaptureVideo(side);
            }
        }
    </script>
</body>
</html>