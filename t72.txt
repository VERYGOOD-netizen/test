<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Time Management Calendar</title>

  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #000;
      color: #fff;
    }
    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 20px;
    }
    .view-toggle, .navigation {
      margin-bottom: 20px;
      text-align: center;
    }
    .calendar {
      width: 100%;
      background-color: #333;
      border-radius: 8px;
      padding: 10px;
      overflow: auto;
    }
    .week-view, .month-view {
      width: 100%;
    }
    .day-block {
      margin-bottom: 15px;
    }
    .day-header {
      font-weight: bold;
      margin-bottom: 5px;
    }
    textarea {
      width: 100%;
      padding: 10px;
      font-size: 16px;
      box-sizing: border-box;
      resize: none;
      overflow: hidden;
      min-height: 50px;
      background-color: #222;
      color: #fff;
      border: 1px solid #555;
      display: block;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      color: #fff;
    }
    td, th {
      border: 1px solid #444;
      padding: 8px;
      text-align: center;
      vertical-align: top;
    }
    th {
      background-color: #555;
    }
    .navigation button {
      margin: 5px;
    }
    .date-label {
      font-weight: bold;
      display: block;
      margin-bottom: 5px;
    }
    button {
      background-color: #007BFF;
      border: none;
      border-radius: 8px;
      color: white;
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
      transition: background-color 0.3s, transform 0.2s;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    button:hover {
      background-color: #0056b3;
      transform: scale(1.05);
    }
    button:active {
      background-color: #004080;
      transform: scale(1);
    }
    button:focus {
      outline: none;
      box-shadow: 0 0 0 3px rgba(38, 143, 255, 0.5);
    }
    .month-view .current-month {
      background-color: red;
    }
    .month-view .other-month {
      background-color: blue;
      color: white;
    }
    .today {
      background-color: yellow !important;
      color: black !important;
    }
    #login-form {
      margin-bottom: 20px;
    }
    #login-form input {
      padding: 10px;
      font-size: 16px;
      border-radius: 4px;
      border: 1px solid #555;
    }
    #user-info {
      margin-bottom: 10px;
    }
    .resize-buttons {
      position: fixed;
      top: 10px;
      right: 10px;
      z-index: 1000;
    }
  </style>

</head>

<body onload="checkLogin(); restoreZoom()">
<br>
<br>
  <div class="resize-buttons">
    <button onclick="minimizePage()">Minimize</button>
    <button onclick="maximizePage()">Maximize</button>
  </div>

  <div class="container">
    <div id="login-form">
      <input type="email" id="email" placeholder="Enter your Gmail address" required>
      <button onclick="login()">Login</button>
    </div>

    <div id="user-info" style="display: none;">
      Logged in as: <span id="user-email"></span>
      <br>
      <br>
      <button onclick="logout()">Logout</button>
    </div>

    <p><a href="t7.html">Go back to today mode</a></p>

    <div id="calendar-container" style="display: none;">
      <div class="view-toggle">
        <button onclick="showView('week')">Weekly View</button>
        <button onclick="showView('month')">Monthly View</button>
      </div>

      <div class="navigation">
        <button onclick="changePeriod(-1)">Previous</button>
        <button onclick="changePeriod(1)">Next</button>
      </div>

      <div class="calendar week-view" id="week-view">
        <h2 id="week-title">Weekly View</h2>
        <div id="week-container"></div>
      </div>

      <div class="calendar month-view" id="month-view" style="display:none;">
        <h2 id="month-title">Monthly View</h2>
        <table>
          <tr>
            <th>Sun</th>
            <th>Mon</th>
            <th>Tue</th>
            <th>Wed</th>
            <th>Thu</th>
            <th>Fri</th>
            <th>Sat</th>
          </tr>
          <tbody id="month-days"></tbody>
        </table>
      </div>
    </div>
  </div>

  <script>
    let currentUser = null;
    let eventsData = {};
    let currentDate = new Date();

    function checkLogin() {
      const storedEmail = localStorage.getItem('loggedInEmail');
      if (storedEmail) {
        currentUser = storedEmail;
        document.getElementById('login-form').style.display = 'none';
        document.getElementById('user-info').style.display = 'block';
        document.getElementById('user-email').textContent = storedEmail;
        document.getElementById('calendar-container').style.display = 'block';
        loadEventsData();
        showView('week');
      }
    }

    function login() {
      const email = document.getElementById('email').value;
      if (email && email.endsWith('@gmail.com')) {
        currentUser = email;
        localStorage.setItem('loggedInEmail', email);
        document.getElementById('login-form').style.display = 'none';
        document.getElementById('user-info').style.display = 'block';
        document.getElementById('user-email').textContent = email;
        document.getElementById('calendar-container').style.display = 'block';
        loadEventsData();
        showView('week');
      } else {
        alert('Please enter a valid Gmail address.');
      }
    }

    function logout() {
      currentUser = null;
      eventsData = {};
      localStorage.removeItem('loggedInEmail');
      document.getElementById('login-form').style.display = 'block';
      document.getElementById('user-info').style.display = 'none';
      document.getElementById('calendar-container').style.display = 'none';
      document.getElementById('email').value = '';
    }

    function loadEventsData() {
      const storedData = localStorage.getItem(`calendarEvents_${currentUser}`);
      if (storedData) {
        eventsData = JSON.parse(storedData);
      }
    }

    function saveEventsData() {
      localStorage.setItem(`calendarEvents_${currentUser}`, JSON.stringify(eventsData));
    }

    function showView(view) {
      const weekView = document.getElementById('week-view');
      const monthView = document.getElementById('month-view');

      if (view === 'week') {
        weekView.style.display = 'block';
        monthView.style.display = 'none';
        generateWeeklyView(currentDate);
      } else if (view === 'month') {
        weekView.style.display = 'none';
        monthView.style.display = 'block';
        generateMonthlyView(currentDate);
      }
    }

    function generateWeeklyView(date) {
      const startOfWeek = new Date(date);
      startOfWeek.setDate(date.getDate() - date.getDay());
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);

      document.getElementById('week-title').innerText = `Weekly View - ${startOfWeek.toLocaleDateString()} to ${endOfWeek.toLocaleDateString()}`;

      const weekContainer = document.getElementById('week-container');
      weekContainer.innerHTML = '';

      const dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
      for (let i = 0; i < 7; i++) {
        const day = new Date(startOfWeek);
        day.setDate(startOfWeek.getDate() + i);
        const formattedDate = formatDate(day);
        const isToday = day.toDateString() === new Date().toDateString();

        const dayBlock = document.createElement('div');
        dayBlock.classList.add('day-block');
        if (isToday) {
          dayBlock.classList.add('today');
        }

        const dayHeader = document.createElement('div');
        dayHeader.classList.add('day-header');
        dayHeader.innerText = `${dayNames[i]} - ${day.toLocaleDateString()}`;

        const textArea = document.createElement('textarea');
        textArea.value = eventsData[formattedDate] || '';
        textArea.oninput = () => {
          eventsData[formattedDate] = textArea.value;
          saveEventsData();
        };

        dayBlock.appendChild(dayHeader);
        dayBlock.appendChild(textArea);

        weekContainer.appendChild(dayBlock);
      }
    }

    function generateMonthlyView(date) {
      const year = date.getFullYear();
      const month = date.getMonth();

      document.getElementById('month-title').innerText = `Monthly View - ${date.toLocaleString('default', { month: 'long' })} ${year}`;

      const firstDayOfMonth = new Date(year, month, 1);
      const firstDayOfWeek = firstDayOfMonth.getDay();

      const daysInMonth = new Date(year, month + 1, 0).getDate();
      const today = new Date();

      let dayCounter = 1;
      let html = '';
      for (let week = 0; week < 6; week++) {
        html += '<tr>';
        for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {
          if (week === 0 && dayOfWeek < firstDayOfWeek || dayCounter > daysInMonth) {
            html += '<td></td>';
          } else {
            const currentDay = new Date(year, month, dayCounter);
            const formattedDate = formatDate(currentDay);
            const isToday = currentDay.toDateString() === today.toDateString();
            const dayClass = isToday ? 'today' : '';
            html += `<td class="${dayClass}">${dayCounter}</td>`;
            dayCounter++;
          }
        }
        html += '</tr>';
        if (dayCounter > daysInMonth) {
          break;
        }
      }

      document.getElementById('month-days').innerHTML = html;
    }

    function formatDate(date) {
      const year = date.getFullYear();
      const month = date.getMonth() + 1;
      const day = date.getDate();
      return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
    }

    function changePeriod(direction) {
      const currentView = document.getElementById('week-view').style.display === 'block' ? 'week' : 'month';

      if (currentView === 'week') {
        currentDate.setDate(currentDate.getDate() + (7 * direction));
        generateWeeklyView(currentDate);
      } else if (currentView === 'month') {
        currentDate.setMonth(currentDate.getMonth() + direction);
        generateMonthlyView(currentDate);
      }
    }

    // Zoom Functions
    function minimizePage() {
      localStorage.setItem('zoomSize', 'minimized');
      document.body.style.transform = 'scale(0.75)';
      document.body.style.transition = 'transform 0.3s';
    }

    function maximizePage() {
      localStorage.setItem('zoomSize', 'maximized');
      document.body.style.transform = 'scale(1)';
      document.body.style.transition = 'transform 0.3s';
    }

    function restoreZoom() {
      const zoomSize = localStorage.getItem('zoomSize');
      if (zoomSize === 'minimized') {
        document.body.style.transform = 'scale(0.75)';
      } else {
        document.body.style.transform = 'scale(1)';
      }
    }
  </script>

</body>
</html>
